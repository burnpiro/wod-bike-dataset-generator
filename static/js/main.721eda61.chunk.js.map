{"version":3,"sources":["components/Layout/Layout.js","components/Network/Network.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","main","minHeight","footer","backgroundColor","palette","background","paper","padding","Layout","children","classes","Fragment","CssBaseline","AppBar","position","Toolbar","noWrap","className","gutterBottom","component","data","type","mode","locations","marker","size","cmin","cmax","colorscale","colorbar","title","ticksuffix","showticksuffix","line","name","layout","geo","scope","resolution","autosize","Network","useResizeHandler","style","width","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAOA,SAASA,IACP,OACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,UACrD,mBACA,IAAIC,MAAOC,cACX,KAKP,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAE7BC,KAAM,CACJC,UAAW,uBAEbC,OAAQ,CACNC,gBAAiBP,EAAMQ,QAAQC,WAAWC,MAC1CC,QAASX,EAAMG,QAAQ,EAAG,QAIf,SAASS,EAAT,GAA6B,IAAZC,EAAW,EAAXA,SACxBC,EAAUhB,IAEhB,OACE,kBAAC,IAAMiB,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,YACf,kBAACC,EAAA,EAAD,KACE,kBAAC3B,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAU0B,QAAM,GAA/C,iBAKJ,0BAAMC,UAAWP,EAAQV,MACrBS,GAGJ,4BAAQQ,UAAWP,EAAQR,QACzB,kBAACd,EAAA,EAAD,CAAYC,QAAQ,KAAKE,MAAM,SAAS2B,cAAY,GAApD,UAGA,kBAAC9B,EAAA,EAAD,CACEC,QAAQ,YACRE,MAAM,SACND,MAAM,gBACN6B,UAAU,KAJZ,qBAQA,kBAAChC,EAAD,Q,qDCxDFiC,EAAO,CACX,CACEC,KAAM,aACNC,KAAM,UACNC,UAAW,CAAC,MAAO,MAAO,MAAO,OACjCC,OAAQ,CACNC,KAAM,CAAC,GAAI,GAAI,GAAI,IACnBnC,MAAO,CAAC,GAAI,GAAI,GAAI,IACpBoC,KAAM,EACNC,KAAM,GACNC,WAAY,SACZC,SAAU,CACRC,MAAO,YACPC,WAAY,IACZC,eAAgB,QAElBC,KAAM,CACJ3C,MAAO,UAGX4C,KAAM,gBAIJC,EAAS,CACbC,IAAK,CACHC,MAAO,SACPC,WAAY,IAEdC,UAAU,GAoBGC,E,uKAXX,OACE,kBAAC,IAAD,CACEpB,KAAMA,EACNe,OAAQA,EACRM,kBAAkB,EAClBC,MAAO,CAACC,MAAM,OAAQ1C,UAAW,6B,GAPnB2C,IAAMC,W,MC1BbC,MARf,WACE,OACE,kBAACtC,EAAD,KACE,kBAAC,EAAD,QCIcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.721eda61.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright Â© \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  main: {\n    minHeight: 'calc(100vh - 200px)',\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(2, 2),\n  },\n}));\n\nexport default function Layout({children}) {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            WRM Network\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.main}>\n        { children }\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography\n          variant=\"subtitle1\"\n          align=\"center\"\n          color=\"textSecondary\"\n          component=\"p\"\n        >\n          Sth in the footer\n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\n\nconst data = [\n  {\n    type: \"scattergeo\",\n    mode: \"markers\",\n    locations: [\"FRA\", \"DEU\", \"RUS\", \"ESP\"],\n    marker: {\n      size: [20, 30, 15, 10],\n      color: [10, 20, 40, 50],\n      cmin: 0,\n      cmax: 50,\n      colorscale: \"Greens\",\n      colorbar: {\n        title: \"Some rate\",\n        ticksuffix: \"%\",\n        showticksuffix: \"last\",\n      },\n      line: {\n        color: \"black\",\n      },\n    },\n    name: \"europe data\",\n  },\n];\n\nconst layout = {\n  geo: {\n    scope: \"europe\",\n    resolution: 50,\n  },\n  autosize: true\n};\n\nconst config = {\n  responsive: true\n};\n\nclass Network extends React.Component {\n  render() {\n    return (\n      <Plot\n        data={data}\n        layout={layout}\n        useResizeHandler={true}\n        style={{width:\"100%\", minHeight: \"calc(100vh - 200px)\"}}\n      />\n    );\n  }\n}\n\nexport default Network;\n","import React from \"react\";\nimport Layout from \"../Layout/Layout\";\nimport Network from \"../Network/Network\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Network />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}