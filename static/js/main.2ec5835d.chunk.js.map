{"version":3,"sources":["components/Layout/logo.svg","components/Layout/Layout.js","hooks/useFetchData.js","hooks/useFetchNodes.js","components/Network/Network.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Copyright","Typography","variant","color","align","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","main","minHeight","logo","maxHeight","footer","position","bottom","width","backgroundColor","palette","background","paper","padding","Layout","children","classes","Fragment","CssBaseline","AppBar","Toolbar","src","alt","className","noWrap","gutterBottom","dataFetchReducer","state","action","type","isLoading","isError","data","payload","Error","useFetchData","initialUrl","initialData","useState","url","setUrl","useReducer","dispatch","useEffect","didCancel","a","axios","result","fetchData","preprocessNodes","nodes","lat","map","row","lng","ids","names","lon","mode","marker","size","hoverinfo","text","preprocessPaths","paths","id","useFetchNodes","nodesData","isNodesLoading","isNodesError","pathsData","isPathsLoading","isPathsError","overlay","top","left","height","paddingTop","display","flexDirection","alignItems","layout","dragmode","mapbox","style","center","margin","r","t","b","l","zoom","autosize","showlegend","Network","tempArr","slice","console","log","useResizeHandler","CircularProgress","thickness","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ec5835d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.559ba900.svg\";","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport logo from './logo.svg'\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright Â© \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  main: {\n    minHeight: 'calc(100vh - 70px)',\n  },\n  logo: {\n    maxHeight: 32,\n    marginRight: theme.spacing(2)\n  },\n  footer: {\n    position: 'fixed',\n    bottom: 0,\n    width: '100vw',\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(2, 2),\n  },\n}));\n\nexport default function Layout({children}) {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <img src={logo} alt=\"WRM Logo\" className={classes.logo}/>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            WRM Network\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.main}>\n        { children }\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport axios from 'axios';\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst useFetchData = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\" });\n\n      try {\n        const result = await axios(url);\n\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_FAILURE\" });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  return [state, setUrl];\n};\n\nexport default useFetchData;\n","import React, { useState, useEffect } from \"react\";\nimport useFetchData from \"./useFetchData\";\n\nconst preprocessNodes = (nodes = []) => {\n  const lat = nodes.map((row) => row[\"lat\"]);\n  const lng = nodes.map((row) => row[\"lng\"]);\n  const ids = nodes.map((row) => row[\"id\"]);\n  const names = nodes.map((row) => row[\"name\"]);\n  return [\n    {\n      type: \"scattermapbox\",\n      lat: lat,\n      lon: lng,\n      ids: ids,\n      mode: \"markers\",\n      marker: {\n        size: 14,\n        color: \"blue\",\n      },\n      hoverinfo: \"text\",\n      text: names,\n    },\n  ];\n};\n\nconst preprocessPaths = (paths = []) => {\n  return paths.map((row) => ({\n    type: \"scattermapbox\",\n    lat: row.lng,\n    lon: row.lat,\n    ids: row.id,\n    mode: \"lines\",\n    marker: {\n      size: 14,\n      color: \"red\",\n    },\n    id: row.id,\n    text: `Connection between${row.id}`,\n  }));\n};\n\nconst useFetchNodes = () => {\n  const [\n    { data: nodesData, isLoading: isNodesLoading, isError: isNodesError },\n    doFetchNodes,\n  ] = useFetchData(\"nodes_list.json\", []);\n  const [\n    { data: pathsData, isLoading: isPathsLoading, isError: isPathsError },\n    doFetchPaths,\n  ] = useFetchData(\"paths_reduced-e7.json\", []);\n\n  return [\n    {\n      nodes: preprocessNodes(nodesData),\n      paths: preprocessPaths(pathsData),\n    },\n    isNodesLoading || isPathsLoading,\n    isNodesError || isPathsError,\n  ];\n};\n\nexport default useFetchNodes;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Plot from \"react-plotly.js\";\nimport useFetchNodes from \"../../hooks/useFetchNodes\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vw\",\n    paddingTop: \"25%\",\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    color: \"white\",\n  },\n}));\n\nconst layout = {\n  dragmode: \"zoom\",\n  mapbox: {\n    style: \"open-street-map\",\n    center: { lat: 51.11, lon: 17.03 },\n    margin: { r: 0, t: 0, b: 0, l: 0 },\n    zoom: 11,\n  },\n  autosize: true,\n  showlegend: false,\n};\n\nconst Network = () => {\n  const classes = useStyles();\n  const [fileProgress, setFileProgess] = useState(1.0);\n  const [nodesData, setNodesData] = useState([]);\n  const [pathsData, setPathsData] = useState([]);\n  const [{ nodes, paths }, isLoading, isError] = useFetchNodes();\n\n  const tempArr = paths.slice(0, 40);\n  const tempArr2 = paths.slice(30, 70);\n  console.log(nodes, paths);\n  return (\n    <React.Fragment>\n      <Plot\n        data={nodes === [] ? [] : [...nodes, ...tempArr]}\n        layout={layout}\n        useResizeHandler={true}\n        style={{ width: \"100%\", minHeight: \"calc(100vh - 70px)\" }}\n      />\n      {isLoading && (\n        <div className={classes.overlay}>\n          <CircularProgress color=\"secondary\" size={80} thickness={4} />\n          <h1>Network data is loading... Please wait :)</h1>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Network;\n","import React from \"react\";\nimport Layout from \"../Layout/Layout\";\nimport Network from \"../Network/Network\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Network />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}